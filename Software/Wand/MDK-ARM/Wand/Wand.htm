<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [Wand\Wand.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image Wand\Wand.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Sat Nov 30 20:16:56 2024
<BR><P>
<H3>Maximum Stack Usage =        448 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; dataProcess &rArr; AC_update &rArr; AC_save &rArr; W25QXX_Page_Program &rArr; W25QXX_Write_Enable &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[150]">compile_layers</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[150]">compile_layers</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from lto-llvm-3178b0.o(.text.BusFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from lto-llvm-3178b0.o(.text.DMA1_Channel2_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from lto-llvm-3178b0.o(.text.DMA1_Channel4_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from lto-llvm-3178b0.o(.text.DMA1_Channel7_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from lto-llvm-3178b0.o(.text.DebugMon_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from lto-llvm-3178b0.o(.text.HardFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from lto-llvm-3178b0.o(.text.I2C1_ER_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from lto-llvm-3178b0.o(.text.I2C1_EV_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3e]">I2C_DMAAbort</a> from lto-llvm-3178b0.o(.text.I2C_DMAAbort) referenced 4 times from lto-llvm-3178b0.o(.text.I2C_ITError)
 <LI><a href="#[3e]">I2C_DMAAbort</a> from lto-llvm-3178b0.o(.text.I2C_DMAAbort) referenced 4 times from lto-llvm-3178b0.o(.text.I2C_Slave_STOPF)
 <LI><a href="#[3f]">IsKey1Down</a> from lto-llvm-3178b0.o(.text.IsKey1Down) referenced 2 times from lto-llvm-3178b0.o(.text.KEY_FIFO_Init)
 <LI><a href="#[40]">IsKey2Down</a> from lto-llvm-3178b0.o(.text.IsKey2Down) referenced 2 times from lto-llvm-3178b0.o(.text.KEY_FIFO_Init)
 <LI><a href="#[41]">IsKey3Down</a> from lto-llvm-3178b0.o(.text.IsKey3Down) referenced 2 times from lto-llvm-3178b0.o(.text.KEY_FIFO_Init)
 <LI><a href="#[3]">MemManage_Handler</a> from lto-llvm-3178b0.o(.text.MemManage_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from lto-llvm-3178b0.o(.text.NMI_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from lto-llvm-3178b0.o(.text.PendSV_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[33]">RTC_Alarm_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from lto-llvm-3178b0.o(.text.SVC_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from lto-llvm-3178b0.o(.text.SysTick_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from lto-llvm-3178b0.o(.text.SystemInit) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from lto-llvm-3178b0.o(.text.TIM4_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[3a]">TIM_DMADelayPulseCplt</a> from lto-llvm-3178b0.o(.text.TIM_DMADelayPulseCplt) referenced 8 times from lto-llvm-3178b0.o(.text.HAL_TIM_PWM_Start_DMA)
 <LI><a href="#[3b]">TIM_DMADelayPulseHalfCplt</a> from lto-llvm-3178b0.o(.text.TIM_DMADelayPulseHalfCplt) referenced 8 times from lto-llvm-3178b0.o(.text.HAL_TIM_PWM_Start_DMA)
 <LI><a href="#[3c]">TIM_DMAError</a> from lto-llvm-3178b0.o(.text.TIM_DMAError) referenced 8 times from lto-llvm-3178b0.o(.text.HAL_TIM_PWM_Start_DMA)
 <LI><a href="#[3d]">UART_DMAAbortOnError</a> from lto-llvm-3178b0.o(.text.UART_DMAAbortOnError) referenced 2 times from lto-llvm-3178b0.o(.text.HAL_UART_IRQHandler)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from lto-llvm-3178b0.o(.text.USART1_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from lto-llvm-3178b0.o(.text.USART2_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from lto-llvm-3178b0.o(.text.USART3_IRQHandler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from lto-llvm-3178b0.o(.text.UsageFault_Handler) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f103xb.o(.text) referenced from startup_stm32f103xb.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f103xb.o(.text)
 <LI><a href="#[5c]">apply_mode</a> from lto-llvm-3178b0.o(.text.apply_mode) referenced from lto-llvm-3178b0.o(.rodata)
 <LI><a href="#[5b]">apply_power</a> from lto-llvm-3178b0.o(.text.apply_power) referenced from lto-llvm-3178b0.o(.rodata)
 <LI><a href="#[5f]">apply_swing</a> from lto-llvm-3178b0.o(.text.apply_swing) referenced 2 times from lto-llvm-3178b0.o(.rodata)
 <LI><a href="#[5d]">apply_temperature</a> from lto-llvm-3178b0.o(.text.apply_temperature) referenced 2 times from lto-llvm-3178b0.o(.rodata)
 <LI><a href="#[5e]">apply_wind_speed</a> from lto-llvm-3178b0.o(.text.apply_wind_speed) referenced from lto-llvm-3178b0.o(.rodata)
 <LI><a href="#[46]">conv2d_build</a> from lto-llvm-3178b0.o(.text.conv2d_build) referenced 2 times from lto-llvm-3178b0.o(.text.conv2d_s)
 <LI><a href="#[47]">conv2d_free</a> from lto-llvm-3178b0.o(.text.conv2d_free) referenced 2 times from lto-llvm-3178b0.o(.text.conv2d_s)
 <LI><a href="#[45]">conv2d_run</a> from lto-llvm-3178b0.o(.text.conv2d_run) referenced 2 times from lto-llvm-3178b0.o(.text.conv2d_s)
 <LI><a href="#[56]">default_build</a> from lto-llvm-3178b0.o(.text.default_build) referenced 2 times from lto-llvm-3178b0.o(.text.output_s)
 <LI><a href="#[49]">dense_build</a> from lto-llvm-3178b0.o(.text.dense_build) referenced 2 times from lto-llvm-3178b0.o(.text.dense_s)
 <LI><a href="#[4a]">dense_free</a> from lto-llvm-3178b0.o(.text.dense_free) referenced 2 times from lto-llvm-3178b0.o(.text.dense_s)
 <LI><a href="#[48]">dense_run</a> from lto-llvm-3178b0.o(.text.dense_run) referenced 2 times from lto-llvm-3178b0.o(.text.dense_s)
 <LI><a href="#[39]">flatten_build</a> from lto-llvm-3178b0.o(.text.flatten_build) referenced 2 times from lto-llvm-3178b0.o(.text.Flatten)
 <LI><a href="#[38]">flatten_run</a> from lto-llvm-3178b0.o(.text.flatten_run) referenced 2 times from lto-llvm-3178b0.o(.text.Flatten)
 <LI><a href="#[5a]">fputc</a> from lto-llvm-3178b0.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[4c]">input_build</a> from lto-llvm-3178b0.o(.text.input_build) referenced 2 times from lto-llvm-3178b0.o(.text.input_s)
 <LI><a href="#[4b]">input_run</a> from lto-llvm-3178b0.o(.text.input_run) referenced 2 times from lto-llvm-3178b0.o(.text.input_s)
 <LI><a href="#[44]">leaky_relu_run</a> from lto-llvm-3178b0.o(.text.leaky_relu_run) referenced 2 times from lto-llvm-3178b0.o(.text.act_leaky_relu)
 <LI><a href="#[4f]">lstm_cell_free</a> from lto-llvm-3178b0.o(.text.lstm_cell_free) referenced 2 times from lto-llvm-3178b0.o(.text.lstm_cell_s)
 <LI><a href="#[4e]">lstm_cell_q7_q15_build</a> from lto-llvm-3178b0.o(.text.lstm_cell_q7_q15_build) referenced 2 times from lto-llvm-3178b0.o(.text.lstm_cell_s)
 <LI><a href="#[4d]">lstm_cell_q7_q15_run</a> from lto-llvm-3178b0.o(.text.lstm_cell_q7_q15_run) referenced 2 times from lto-llvm-3178b0.o(.text.lstm_cell_s)
 <LI><a href="#[35]">main</a> from lto-llvm-3178b0.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[54]">model_active</a> from lto-llvm-3178b0.o(.text.model_active) referenced 2 times from lto-llvm-3178b0.o(.text.new_model)
 <LI><a href="#[50]">model_add</a> from lto-llvm-3178b0.o(.text.model_add) referenced 2 times from lto-llvm-3178b0.o(.text.new_model)
 <LI><a href="#[51]">model_hook</a> from lto-llvm-3178b0.o(.text.model_hook) referenced 2 times from lto-llvm-3178b0.o(.text.new_model)
 <LI><a href="#[52]">model_merge</a> from lto-llvm-3178b0.o(.text.model_merge) referenced 2 times from lto-llvm-3178b0.o(.text.new_model)
 <LI><a href="#[53]">model_mergex</a> from lto-llvm-3178b0.o(.text.model_mergex) referenced 2 times from lto-llvm-3178b0.o(.text.new_model)
 <LI><a href="#[55]">output_run</a> from lto-llvm-3178b0.o(.text.output_run) referenced 2 times from lto-llvm-3178b0.o(.text.output_s)
 <LI><a href="#[58]">rnn_build</a> from lto-llvm-3178b0.o(.text.rnn_build) referenced 2 times from lto-llvm-3178b0.o(.text.rnn_s)
 <LI><a href="#[59]">rnn_free</a> from lto-llvm-3178b0.o(.text.rnn_free) referenced 2 times from lto-llvm-3178b0.o(.text.rnn_s)
 <LI><a href="#[57]">rnn_run</a> from lto-llvm-3178b0.o(.text.rnn_run) referenced 2 times from lto-llvm-3178b0.o(.text.rnn_s)
 <LI><a href="#[43]">softmax_build</a> from lto-llvm-3178b0.o(.text.softmax_build) referenced 2 times from lto-llvm-3178b0.o(.text.Softmax)
 <LI><a href="#[42]">softmax_run</a> from lto-llvm-3178b0.o(.text.softmax_run) referenced 2 times from lto-llvm-3178b0.o(.text.Softmax)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[1f6]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[60]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[74]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1f7]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1f8]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1f9]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1fa]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1fb]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f103xb.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1d7]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_nmode_pos
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_nmode_data_temp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_nmode_data_speed
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_delay_code_tag48_pos
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_delay_code_pos
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_delay_code_data
</UL>

<P><STRONG><a name="[174]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ir_keymap
</UL>

<P><STRONG><a name="[62]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_zero
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_repeat_times
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_one
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_nmode_data_temp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_nmode_data_speed
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_lastbit
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame_len
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_endian
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_delay_code_tag48_pos
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_delay_code_pos
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_delay_code_data
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_boot_code
</UL>

<P><STRONG><a name="[1fc]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[66]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[63]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[175]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_control
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_run
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr_v
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_zero
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_repeat_times
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_one
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_nmode_pos
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_nmode_data_temp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_nmode_data_speed
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_nmode
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_lastbit
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_function_2
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_function_1
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame_len
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_endian
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_delay_code_tag48_pos
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_delay_code_pos
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_delay_code_data
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_delay_code
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_comp_data_type_2
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_comp_data_type_1
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_checksum_spec_half_byte_typed
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_boot_code
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_bit_num
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_run
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstm_cell_q7_q15_run
</UL>

<P><STRONG><a name="[1e0]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
</UL>

<P><STRONG><a name="[1fd]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[1fe]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_feed_data
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_feed_data
</UL>

<P><STRONG><a name="[1eb]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1ff]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1ee]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[61]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[200]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[201]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>

<P><STRONG><a name="[202]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[203]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[6d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>

<P><STRONG><a name="[6c]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[75]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[204]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[205]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_tv_control
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rnn_run
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_nmode_pos
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_nmode
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame_len
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_delay_code_tag48_pos
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_delay_code_pos
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_delay_code
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_bit_num
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>

<P><STRONG><a name="[131]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_context_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_checksum_malloc
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_model
</UL>

<P><STRONG><a name="[206]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[139]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_leaky_relu
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_feed_data
</UL>

<P><STRONG><a name="[13a]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_leaky_relu
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_feed_data
</UL>

<P><STRONG><a name="[1c2]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_feed_data
</UL>

<P><STRONG><a name="[207]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[7a]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
</UL>

<P><STRONG><a name="[7c]"></a>_drnd</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[208]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text), UNUSED)

<P><STRONG><a name="[1f5]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
</UL>

<P><STRONG><a name="[209]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[20a]"></a>__decompress2</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, __dclz77c.o(.text), UNUSED)

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-3178b0.o(.text.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.DMA1_Channel2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Channel2_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.DMA1_Channel4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Channel4_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.DMA1_Channel7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA1_Channel7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-3178b0.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-3178b0.o(.text.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.I2C1_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C1_ER_IRQHandler &rArr; HAL_I2C_ER_IRQHandler &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.I2C1_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = I2C1_EV_IRQHandler &rArr; HAL_I2C_EV_IRQHandler &rArr; I2C_Slave_STOPF &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-3178b0.o(.text.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-3178b0.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-3178b0.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-3178b0.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-3178b0.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(.text)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; model_get_output &rArr; dataProcess &rArr; AC_update &rArr; AC_save &rArr; W25QXX_Page_Program &rArr; W25QXX_Write_Enable &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; dataProcess &rArr; AC_update &rArr; AC_save &rArr; W25QXX_Page_Program &rArr; W25QXX_Write_Enable &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; dataProcess &rArr; AC_update &rArr; AC_save &rArr; W25QXX_Page_Program &rArr; W25QXX_Write_Enable &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = USART3_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; dataProcess &rArr; AC_update &rArr; AC_save &rArr; W25QXX_Page_Program &rArr; W25QXX_Write_Enable &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lto-llvm-3178b0.o(.text.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f103xb.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>fputc</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 678 bytes, Stack size 56 bytes, lto-llvm-3178b0.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = main &rArr; ir_binary_open &rArr; ir_ac_lib_parse &rArr; parse_delay_code &rArr; parse_delay_code_pos &rArr; parse_delay_code_data &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_decode
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_close
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_binary_open
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Load
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_SetColor
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_SendArray
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_FIFO_Get
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_send
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_getsrcArray
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setrgb
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_loop
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_breathe
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_set_static_buf
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mousediscli
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseclick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1e4]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[20b]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[20c]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[20d]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[7e]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_run
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_tv_binary_parse
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_decode
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_close
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_binary_open
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_control
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataProcess
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_model_version
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_block
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowHex
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_save
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_getsrcArray
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tailed_activation
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_memory_block_info
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_layer_info
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_malloc
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_run_to
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_get_output
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_add
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_analysis_result
</UL>

<P><STRONG><a name="[1f4]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[65]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[20e]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[1e6]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1e7]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1e8]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1e9]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1ea]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1ec]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[20f]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[210]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[211]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1f2]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[172]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_ac_context
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_temp_2
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_temp_1
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_solo_code
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_function_2_tag34
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_function_2
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_function_1_tag29
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_function_1
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame_len
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_common_ac_parameter
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_checksum_data
</UL>

<P><STRONG><a name="[182]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_temp_2
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_temp_1
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_solo_code
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_function_2_tag34
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_function_2
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_function_1_tag29
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_function_1
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame_len
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_comp_data_type_2
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_comp_data_type_1
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_common_ac_parameter
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_checksum_spec_half_byte_typed
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_checksum_malloc
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_checksum_data
</UL>

<P><STRONG><a name="[1c1]"></a>pow</STRONG> (Thumb, 2532 bytes, Stack size 112 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_feed_data
</UL>

<P><STRONG><a name="[1c3]"></a>round</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, round.o(i.round))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = round &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_feed_data
</UL>

<P><STRONG><a name="[1f3]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1ed]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1e5]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[1f0]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ef]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[7d]"></a>AC_getsrcArray</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.AC_getsrcArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AC_getsrcArray &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[7f]"></a>AC_init</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.AC_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = AC_init &rArr; W25QXX_Read &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowHex
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>AC_save</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.AC_save))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = AC_save &rArr; W25QXX_Page_Program &rArr; W25QXX_Write_Enable &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Page_Program
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ShowHex
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_update
</UL>

<P><STRONG><a name="[85]"></a>AC_send</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.AC_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AC_send &rArr; KEY_FIFO_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_FIFO_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataProcess
</UL>

<P><STRONG><a name="[87]"></a>AC_update</STRONG> (Thumb, 290 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.AC_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = AC_update &rArr; AC_save &rArr; W25QXX_Page_Program &rArr; W25QXX_Write_Enable &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_save
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataProcess
</UL>

<P><STRONG><a name="[8d]"></a>DMA_SetConfig</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.DMA_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>

<P><STRONG><a name="[cd]"></a>Error_Handler</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.Error_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[89]"></a>Flatten</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.Flatten))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Flatten &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_s
</UL>

<P><STRONG><a name="[f2]"></a>HAL_DMA_Abort</STRONG> (Thumb, 122 bytes, Stack size 12 bytes, lto-llvm-3178b0.o(.text.HAL_DMA_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[f0]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.HAL_DMA_Abort_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[10c]"></a>HAL_DMA_GetState</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.HAL_DMA_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_DMA_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
</UL>

<P><STRONG><a name="[88]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 584 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel7_IRQHandler
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel4_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel2_IRQHandler
</UL>

<P><STRONG><a name="[cc]"></a>HAL_DMA_Init</STRONG> (Thumb, 174 bytes, Stack size 12 bytes, lto-llvm-3178b0.o(.text.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>

<P><STRONG><a name="[8c]"></a>HAL_DMA_Start_IT</STRONG> (Thumb, 202 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.HAL_DMA_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_DMA
</UL>

<P><STRONG><a name="[8e]"></a>HAL_Delay</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_loop
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_breathe
</UL>

<P><STRONG><a name="[ae]"></a>HAL_GPIO_Init</STRONG> (Thumb, 756 bytes, Stack size 40 bytes, lto-llvm-3178b0.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>

<P><STRONG><a name="[e9]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.HAL_GPIO_ReadPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKey3Down
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKey2Down
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsKey1Down
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.HAL_GPIO_WritePin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Page_Program
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>HAL_GetTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-3178b0.o(.text.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>

<P><STRONG><a name="[ff]"></a>HAL_I2C_AbortCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.HAL_I2C_AbortCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_AbortCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort
</UL>

<P><STRONG><a name="[10b]"></a>HAL_I2C_AddrCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.HAL_I2C_AddrCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_AddrCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ADDR
</UL>

<P><STRONG><a name="[90]"></a>HAL_I2C_ER_IRQHandler</STRONG> (Thumb, 390 bytes, Stack size 48 bytes, lto-llvm-3178b0.o(.text.HAL_I2C_ER_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_ER_IRQHandler &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_AF
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_ER_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>HAL_I2C_EV_IRQHandler</STRONG> (Thumb, 964 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.HAL_I2C_EV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_I2C_EV_IRQHandler &rArr; I2C_Slave_STOPF &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_ADDR
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransmit_TXE
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransmit_BTF
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveReceive_RXNE
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveReceive_BTF
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MemoryTransmit_TXE_BTF
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_SB
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ADDR
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Master_ADD10
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_TXE
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_BTF
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_RXNE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_BTF
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ConvertOtherXferOptions
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_EV_IRQHandler
</UL>

<P><STRONG><a name="[100]"></a>HAL_I2C_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.HAL_I2C_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_RXNE
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_DMAAbort
</UL>

<P><STRONG><a name="[a3]"></a>HAL_I2C_Init</STRONG> (Thumb, 634 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[101]"></a>HAL_I2C_ListenCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.HAL_I2C_ListenCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_ListenCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_AF
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
</UL>

<P><STRONG><a name="[103]"></a>HAL_I2C_MasterRxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.HAL_I2C_MasterRxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_MasterRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_RXNE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_BTF
</UL>

<P><STRONG><a name="[105]"></a>HAL_I2C_MasterTxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.HAL_I2C_MasterTxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_MasterTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_TXE
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_BTF
</UL>

<P><STRONG><a name="[102]"></a>HAL_I2C_MemRxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.HAL_I2C_MemRxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_MemRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_RXNE
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_BTF
</UL>

<P><STRONG><a name="[106]"></a>HAL_I2C_MemTxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.HAL_I2C_MemTxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_MemTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MemoryTransmit_TXE_BTF
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_TXE
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_BTF
</UL>

<P><STRONG><a name="[a6]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 1244 bytes, Stack size 88 bytes, lto-llvm-3178b0.o(.text.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[aa]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 530 bytes, Stack size 48 bytes, lto-llvm-3178b0.o(.text.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>

<P><STRONG><a name="[a4]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 190 bytes, Stack size 40 bytes, lto-llvm-3178b0.o(.text.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[109]"></a>HAL_I2C_SlaveRxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.HAL_I2C_SlaveRxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_SlaveRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveReceive_RXNE
</UL>

<P><STRONG><a name="[10a]"></a>HAL_I2C_SlaveTxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.HAL_I2C_SlaveTxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_I2C_SlaveTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_AF
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_SlaveTransmit_TXE
</UL>

<P><STRONG><a name="[12f]"></a>HAL_IncTick</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-3178b0.o(.text.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b1]"></a>HAL_Init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b3]"></a>HAL_InitTick</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b4]"></a>HAL_MspInit</STRONG> (Thumb, 100 bytes, Stack size 12 bytes, lto-llvm-3178b0.o(.text.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[b0]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.HAL_NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_NVIC_EnableIRQ &rArr; __NVIC_EnableIRQ
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>

<P><STRONG><a name="[af]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetPriorityGrouping
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_DMA_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
</UL>

<P><STRONG><a name="[b2]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_NVIC_SetPriorityGrouping &rArr; __NVIC_SetPriorityGrouping
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[bb]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 600 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[bd]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-3178b0.o(.text.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[a5]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[be]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[bc]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 178 bytes, Stack size 20 bytes, lto-llvm-3178b0.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[bf]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1656 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig &rArr; RCC_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Delay
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[c1]"></a>HAL_SPI_Init</STRONG> (Thumb, 256 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI2_Init
</UL>

<P><STRONG><a name="[c2]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 152 bytes, Stack size 48 bytes, lto-llvm-3178b0.o(.text.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[c3]"></a>HAL_SPI_Receive</STRONG> (Thumb, 596 bytes, Stack size 40 bytes, lto-llvm-3178b0.o(.text.HAL_SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
</UL>

<P><STRONG><a name="[c6]"></a>HAL_SPI_Transmit</STRONG> (Thumb, 684 bytes, Stack size 40 bytes, lto-llvm-3178b0.o(.text.HAL_SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transmit
</UL>

<P><STRONG><a name="[c4]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 916 bytes, Stack size 48 bytes, lto-llvm-3178b0.o(.text.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[b5]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_SYSTICK_Config &rArr; SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[d8]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.HAL_TIMEx_BreakCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[da]"></a>HAL_TIMEx_CommutCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.HAL_TIMEx_CommutCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIMEx_CommutCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[123]"></a>HAL_TIMEx_ConfigBreakDeadTime</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.HAL_TIMEx_ConfigBreakDeadTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_TIMEx_ConfigBreakDeadTime
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[122]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 220 bytes, Stack size 20 bytes, lto-llvm-3178b0.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[c9]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[ca]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 300 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[1e2]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 168 bytes, Stack size 12 bytes, lto-llvm-3178b0.o(.text.HAL_TIM_Base_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIM_Base_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delaynus_tim
</UL>

<P><STRONG><a name="[1b2]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 180 bytes, Stack size 12 bytes, lto-llvm-3178b0.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIM_Base_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e3]"></a>HAL_TIM_Base_Stop</STRONG> (Thumb, 76 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.HAL_TIM_Base_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_Base_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delaynus_tim
</UL>

<P><STRONG><a name="[ce]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM4_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[133]"></a>HAL_TIM_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.HAL_TIM_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMAError
</UL>

<P><STRONG><a name="[d4]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 538 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_PeriodElapsedCallback &rArr; model_get_output &rArr; dataProcess &rArr; AC_update &rArr; AC_save &rArr; W25QXX_Page_Program &rArr; W25QXX_Write_Enable &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutCallback
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[db]"></a>HAL_TIM_MspPostInit</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, lto-llvm-3178b0.o(.text.HAL_TIM_MspPostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_MspPostInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[d5]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_OC_DelayElapsedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[dc]"></a>HAL_TIM_PWM_ConfigChannel</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.HAL_TIM_PWM_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_TIM_PWM_ConfigChannel &rArr; TIM_OC4_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4_SetConfig
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3_SetConfig
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[e1]"></a>HAL_TIM_PWM_Init</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.HAL_TIM_PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_PWM_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM3_Init
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM1_Init
</UL>

<P><STRONG><a name="[e2]"></a>HAL_TIM_PWM_MspInit</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.HAL_TIM_PWM_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PWM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
</UL>

<P><STRONG><a name="[d6]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMADelayPulseCplt
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[132]"></a>HAL_TIM_PWM_PulseFinishedHalfCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.HAL_TIM_PWM_PulseFinishedHalfCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_PWM_PulseFinishedHalfCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_DMADelayPulseHalfCplt
</UL>

<P><STRONG><a name="[e3]"></a>HAL_TIM_PWM_Start</STRONG> (Thumb, 328 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.HAL_TIM_PWM_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_send
</UL>

<P><STRONG><a name="[e5]"></a>HAL_TIM_PWM_Start_DMA</STRONG> (Thumb, 842 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.HAL_TIM_PWM_Start_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_TIM_PWM_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Start_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_SendArray
</UL>

<P><STRONG><a name="[e6]"></a>HAL_TIM_PWM_Stop</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.HAL_TIM_PWM_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_TIM_PWM_Stop &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_send
</UL>

<P><STRONG><a name="[d7]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 456 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = HAL_TIM_PeriodElapsedCallback &rArr; model_get_output &rArr; dataProcess &rArr; AC_update &rArr; AC_save &rArr; W25QXX_Page_Program &rArr; W25QXX_Write_Enable &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyroscope
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMove
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_get_output
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_feed_data
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[d9]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.HAL_TIM_TriggerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_TIM_TriggerCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[f3]"></a>HAL_UARTEx_RxEventCallback</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.HAL_UARTEx_RxEventCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.HAL_UART_ErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[ed]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 1066 bytes, Stack size 80 bytes, lto-llvm-3178b0.o(.text.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; dataProcess &rArr; AC_update &rArr; AC_save &rArr; W25QXX_Page_Program &rArr; W25QXX_Write_Enable &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[f6]"></a>HAL_UART_Init</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART3_UART_Init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[f7]"></a>HAL_UART_MspInit</STRONG> (Thumb, 590 bytes, Stack size 64 bytes, lto-llvm-3178b0.o(.text.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[f9]"></a>HAL_UART_Receive_IT</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.HAL_UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_UART_Receive_IT &rArr; UART_Start_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fb]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.HAL_UART_RxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = HAL_UART_RxCpltCallback &rArr; dataProcess &rArr; AC_update &rArr; AC_save &rArr; W25QXX_Page_Program &rArr; W25QXX_Write_Enable &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataProcess
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[fd]"></a>HAL_UART_Transmit</STRONG> (Thumb, 286 bytes, Stack size 40 bytes, lto-llvm-3178b0.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataProcess
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mousediscli
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseclick
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mouseMove
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_get_output
</UL>

<P><STRONG><a name="[134]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[94]"></a>I2C_ConvertOtherXferOptions</STRONG> (Thumb, 52 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.I2C_ConvertOtherXferOptions))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_ConvertOtherXferOptions
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[3e]"></a>I2C_DMAAbort</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.I2C_DMAAbort))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_DMAAbort &rArr; HAL_I2C_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lto-llvm-3178b0.o(.text.I2C_ITError)
<LI> lto-llvm-3178b0.o(.text.I2C_Slave_STOPF)
</UL>
<P><STRONG><a name="[107]"></a>I2C_Flush_DR</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.I2C_Flush_DR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_Flush_DR
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_AF
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MemoryTransmit_TXE_BTF
</UL>

<P><STRONG><a name="[92]"></a>I2C_ITError</STRONG> (Thumb, 634 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.I2C_ITError))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AbortCpltCallback
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Slave_STOPF
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
</UL>

<P><STRONG><a name="[10d]"></a>I2C_IsAcknowledgeFailed</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.I2C_IsAcknowledgeFailed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_IsAcknowledgeFailed
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
</UL>

<P><STRONG><a name="[9c]"></a>I2C_MasterReceive_BTF</STRONG> (Thumb, 428 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.I2C_MasterReceive_BTF))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_MasterReceive_BTF &rArr; HAL_I2C_MemRxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemRxCpltCallback
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[9b]"></a>I2C_MasterReceive_RXNE</STRONG> (Thumb, 362 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.I2C_MasterReceive_RXNE))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = I2C_MasterReceive_RXNE &rArr; I2C_WaitOnSTOPRequestThroughIT
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnSTOPRequestThroughIT
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemRxCpltCallback
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterRxCpltCallback
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ErrorCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[99]"></a>I2C_MasterTransmit_BTF</STRONG> (Thumb, 222 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.I2C_MasterTransmit_BTF))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_MasterTransmit_BTF &rArr; HAL_I2C_MemTxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemTxCpltCallback
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[98]"></a>I2C_MasterTransmit_TXE</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.I2C_MasterTransmit_TXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = I2C_MasterTransmit_TXE &rArr; I2C_MemoryTransmit_TXE_BTF &rArr; I2C_Flush_DR
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MemoryTransmit_TXE_BTF
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemTxCpltCallback
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MasterTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[96]"></a>I2C_Master_ADD10</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.I2C_Master_ADD10))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_Master_ADD10
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[97]"></a>I2C_Master_ADDR</STRONG> (Thumb, 856 bytes, Stack size 60 bytes, lto-llvm-3178b0.o(.text.I2C_Master_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = I2C_Master_ADDR
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[95]"></a>I2C_Master_SB</STRONG> (Thumb, 240 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.I2C_Master_SB))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_Master_SB
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>I2C_MemoryTransmit_TXE_BTF</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.I2C_MemoryTransmit_TXE_BTF))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_MemoryTransmit_TXE_BTF &rArr; I2C_Flush_DR
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_DR
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MemTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterTransmit_TXE
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[a8]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 466 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnTXEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[ab]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 306 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[a2]"></a>I2C_SlaveReceive_BTF</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.I2C_SlaveReceive_BTF))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_SlaveReceive_BTF
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>I2C_SlaveReceive_RXNE</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.I2C_SlaveReceive_RXNE))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_SlaveReceive_RXNE &rArr; HAL_I2C_SlaveRxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[a0]"></a>I2C_SlaveTransmit_BTF</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.I2C_SlaveTransmit_BTF))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_SlaveTransmit_BTF
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>I2C_SlaveTransmit_TXE</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.I2C_SlaveTransmit_TXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = I2C_SlaveTransmit_TXE &rArr; HAL_I2C_SlaveTxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[9d]"></a>I2C_Slave_ADDR</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.I2C_Slave_ADDR))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_Slave_ADDR &rArr; HAL_I2C_AddrCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_AddrCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[91]"></a>I2C_Slave_AF</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.I2C_Slave_AF))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = I2C_Slave_AF &rArr; I2C_Flush_DR
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Flush_DR
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveTxCpltCallback
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ER_IRQHandler
</UL>

<P><STRONG><a name="[9e]"></a>I2C_Slave_STOPF</STRONG> (Thumb, 586 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.I2C_Slave_STOPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_Slave_STOPF &rArr; I2C_ITError &rArr; HAL_DMA_Abort_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ITError
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_SlaveRxCpltCallback
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_ListenCpltCallback
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_GetState
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_EV_IRQHandler
</UL>

<P><STRONG><a name="[ad]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[a7]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[108]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 334 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[a9]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[104]"></a>I2C_WaitOnSTOPRequestThroughIT</STRONG> (Thumb, 120 bytes, Stack size 12 bytes, lto-llvm-3178b0.o(.text.I2C_WaitOnSTOPRequestThroughIT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = I2C_WaitOnSTOPRequestThroughIT
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_MasterReceive_RXNE
</UL>

<P><STRONG><a name="[ac]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_IsAcknowledgeFailed
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[10e]"></a>IR_send</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.IR_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = IR_send &rArr; HAL_TIM_PWM_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_delaynus_tim
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3f]"></a>IsKey1Down</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.IsKey1Down))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKey1Down &rArr; HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.KEY_FIFO_Init)
</UL>
<P><STRONG><a name="[40]"></a>IsKey2Down</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.IsKey2Down))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKey2Down &rArr; HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.KEY_FIFO_Init)
</UL>
<P><STRONG><a name="[41]"></a>IsKey3Down</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.IsKey3Down))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = IsKey3Down &rArr; HAL_GPIO_ReadPin
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.KEY_FIFO_Init)
</UL>
<P><STRONG><a name="[110]"></a>KEY_Detect</STRONG> (Thumb, 326 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.KEY_Detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = KEY_Detect &rArr; KEY_FIFO_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_FIFO_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Scan
</UL>

<P><STRONG><a name="[1b3]"></a>KEY_FIFO_Get</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.KEY_FIFO_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = KEY_FIFO_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>KEY_FIFO_Init</STRONG> (Thumb, 152 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.KEY_FIFO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = KEY_FIFO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>

<P><STRONG><a name="[86]"></a>KEY_FIFO_Put</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.KEY_FIFO_Put))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = KEY_FIFO_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataProcess
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Detect
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_send
</UL>

<P><STRONG><a name="[111]"></a>KEY_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KEY_Init &rArr; KEY_SetParam
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_SetParam
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_FIFO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>KEY_Scan</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.KEY_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = KEY_Scan &rArr; KEY_Detect &rArr; KEY_FIFO_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Detect
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[113]"></a>KEY_SetParam</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.KEY_SetParam))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = KEY_SetParam
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>

<P><STRONG><a name="[e8]"></a>MPU_Get_Gyroscope</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.MPU_Get_Gyroscope))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = MPU_Get_Gyroscope &rArr; MPU_Read_Len &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[115]"></a>MPU_Init</STRONG> (Thumb, 160 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.MPU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MPU_Init &rArr; MPU_Read_Byte &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Gyro_Fsr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Accel_Fsr
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>MPU_Read_Byte</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.MPU_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MPU_Read_Byte &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[114]"></a>MPU_Read_Len</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.MPU_Read_Len))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MPU_Read_Len &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnTXEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyroscope
</UL>

<P><STRONG><a name="[118]"></a>MPU_Set_Accel_Fsr</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.MPU_Set_Accel_Fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MPU_Set_Accel_Fsr &rArr; MPU_Write_Byte &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[117]"></a>MPU_Set_Gyro_Fsr</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.MPU_Set_Gyro_Fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MPU_Set_Gyro_Fsr &rArr; MPU_Write_Byte &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[11b]"></a>MPU_Set_LPF</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.MPU_Set_LPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MPU_Set_LPF &rArr; MPU_Write_Byte &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
</UL>

<P><STRONG><a name="[119]"></a>MPU_Set_Rate</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.MPU_Set_Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MPU_Set_Rate &rArr; MPU_Set_LPF &rArr; MPU_Write_Byte &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_LPF
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[116]"></a>MPU_Write_Byte</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.MPU_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MPU_Write_Byte &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnTXEFlagUntilTimeout &rArr; I2C_IsAcknowledgeFailed
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_LPF
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Gyro_Fsr
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Accel_Fsr
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[11c]"></a>MX_DMA_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.MX_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MX_DMA_Init &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11d]"></a>MX_GPIO_Init</STRONG> (Thumb, 254 bytes, Stack size 64 bytes, lto-llvm-3178b0.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11f]"></a>MX_I2C1_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MX_I2C1_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[120]"></a>MX_SPI2_Init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.MX_SPI2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MX_SPI2_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[121]"></a>MX_TIM1_Init</STRONG> (Thumb, 260 bytes, Stack size 96 bytes, lto-llvm-3178b0.o(.text.MX_TIM1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MX_TIM1_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_ConfigBreakDeadTime
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[124]"></a>MX_TIM2_Init</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_TIM2_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[125]"></a>MX_TIM3_Init</STRONG> (Thumb, 204 bytes, Stack size 64 bytes, lto-llvm-3178b0.o(.text.MX_TIM3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MX_TIM3_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_MspPostInit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>MX_TIM4_Init</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.MX_TIM4_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MX_TIM4_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_USART1_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[129]"></a>MX_USART3_UART_Init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.MX_USART3_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_USART3_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b8]"></a>NVIC_EncodePriority</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.NVIC_EncodePriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_EncodePriority
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[c0]"></a>RCC_Delay</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.RCC_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
</UL>

<P><STRONG><a name="[12a]"></a>RGB_SendArray</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.RGB_SendArray))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RGB_SendArray &rArr; HAL_TIM_PWM_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_loop
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_breathe
</UL>

<P><STRONG><a name="[1b6]"></a>RGB_SetColor</STRONG> (Thumb, 282 bytes, Stack size 12 bytes, lto-llvm-3178b0.o(.text.RGB_SetColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RGB_SetColor
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_loop
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_breathe
</UL>

<P><STRONG><a name="[1b7]"></a>Reset_Load</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.Reset_Load))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Reset_Load
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_loop
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rgb_breathe
</UL>

<P><STRONG><a name="[c5]"></a>SPI_EndRxTransaction</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.SPI_EndRxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_EndRxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>

<P><STRONG><a name="[c7]"></a>SPI_EndRxTxTransaction</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.SPI_EndRxTxTransaction))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>

<P><STRONG><a name="[12c]"></a>SPI_Receive</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.SPI_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
</UL>

<P><STRONG><a name="[12d]"></a>SPI_Transmit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.SPI_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SPI_Transmit &rArr; HAL_SPI_Transmit &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadID
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Page_Program
</UL>

<P><STRONG><a name="[12b]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 292 bytes, Stack size 40 bytes, lto-llvm-3178b0.o(.text.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTxTransaction
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_EndRxTransaction
</UL>

<P><STRONG><a name="[82]"></a>ShowHex</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.ShowHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ShowHex &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_save
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_init
</UL>

<P><STRONG><a name="[12e]"></a>Softmax</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.Softmax))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Softmax &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softmax_s
</UL>

<P><STRONG><a name="[c8]"></a>SysTick_Config</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.SysTick_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SysTick_Config &rArr; __NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>

<P><STRONG><a name="[130]"></a>SystemClock_Config</STRONG> (Thumb, 104 bytes, Stack size 72 bytes, lto-llvm-3178b0.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_EncodePriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cb]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 262 bytes, Stack size 12 bytes, lto-llvm-3178b0.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[e4]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Stop
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start_DMA
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_Start
</UL>

<P><STRONG><a name="[3a]"></a>TIM_DMADelayPulseCplt</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.TIM_DMADelayPulseCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_DMADelayPulseCplt &rArr; HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.HAL_TIM_PWM_Start_DMA)
</UL>
<P><STRONG><a name="[3b]"></a>TIM_DMADelayPulseHalfCplt</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.TIM_DMADelayPulseHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_DMADelayPulseHalfCplt &rArr; HAL_TIM_PWM_PulseFinishedHalfCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedHalfCpltCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.HAL_TIM_PWM_Start_DMA)
</UL>
<P><STRONG><a name="[3c]"></a>TIM_DMAError</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.TIM_DMAError))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_DMAError &rArr; HAL_TIM_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.HAL_TIM_PWM_Start_DMA)
</UL>
<P><STRONG><a name="[cf]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, lto-llvm-3178b0.o(.text.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[d1]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, lto-llvm-3178b0.o(.text.TIM_ITRx_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ITRx_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[dd]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 206 bytes, Stack size 20 bytes, lto-llvm-3178b0.o(.text.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[de]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 216 bytes, Stack size 20 bytes, lto-llvm-3178b0.o(.text.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[df]"></a>TIM_OC3_SetConfig</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, lto-llvm-3178b0.o(.text.TIM_OC3_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC3_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[e0]"></a>TIM_OC4_SetConfig</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, lto-llvm-3178b0.o(.text.TIM_OC4_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_OC4_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_ConfigChannel
</UL>

<P><STRONG><a name="[d0]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, lto-llvm-3178b0.o(.text.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[d2]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, lto-llvm-3178b0.o(.text.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[3d]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_DMAAbortOnError &rArr; HAL_UART_ErrorCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[ef]"></a>UART_EndRxTransfer</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.UART_EndRxTransfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[f5]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = UART_EndTransmit_IT &rArr; HAL_UART_TxCpltCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[ee]"></a>UART_Receive_IT</STRONG> (Thumb, 358 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = UART_Receive_IT &rArr; HAL_UART_RxCpltCallback &rArr; dataProcess &rArr; AC_update &rArr; AC_save &rArr; W25QXX_Page_Program &rArr; W25QXX_Write_Enable &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_RxEventCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>UART_SetConfig</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[fa]"></a>UART_Start_Receive_IT</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, lto-llvm-3178b0.o(.text.UART_Start_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_Start_Receive_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Receive_IT
</UL>

<P><STRONG><a name="[f4]"></a>UART_Transmit_IT</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, lto-llvm-3178b0.o(.text.UART_Transmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UART_Transmit_IT
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[fe]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, lto-llvm-3178b0.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[84]"></a>W25QXX_Page_Program</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.W25QXX_Page_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = W25QXX_Page_Program &rArr; W25QXX_Write_Enable &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transmit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_save
</UL>

<P><STRONG><a name="[81]"></a>W25QXX_Read</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.W25QXX_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = W25QXX_Read &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transmit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_init
</UL>

<P><STRONG><a name="[80]"></a>W25QXX_ReadID</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.W25QXX_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = W25QXX_ReadID &rArr; SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transmit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_init
</UL>

<P><STRONG><a name="[137]"></a>W25QXX_ReadSR</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.W25QXX_ReadSR))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = W25QXX_ReadSR &rArr; SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transmit
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Receive
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
</UL>

<P><STRONG><a name="[136]"></a>W25QXX_Wait_Busy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.W25QXX_Wait_Busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_ReadSR
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Write_Enable
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Read
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Page_Program
</UL>

<P><STRONG><a name="[135]"></a>W25QXX_Write_Enable</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.W25QXX_Write_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = W25QXX_Write_Enable &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Wait_Busy
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Transmit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;W25QXX_Page_Program
</UL>

<P><STRONG><a name="[1a5]"></a>__NNOM_SSAT</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, lto-llvm-3178b0.o(.text.__NNOM_SSAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __NNOM_SSAT
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_softmax_q7
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_fully_connected_q7_opt
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_convolve_HWC_q7_nonsquare
</UL>

<P><STRONG><a name="[1a4]"></a>__NNOM_SSAT.355</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, lto-llvm-3178b0.o(.text.__NNOM_SSAT.355))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __NNOM_SSAT.355
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_mult_q15
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_fully_connected_mat_q7_vec_q15_opt
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_convolve_HWC_q15_nonsquare
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_add_q15
</UL>

<P><STRONG><a name="[1ab]"></a>__NNOM_USAT</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.__NNOM_USAT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __NNOM_USAT
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_softmax_q7
</UL>

<P><STRONG><a name="[b6]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[b7]"></a>__NVIC_GetPriorityGrouping</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-3178b0.o(.text.__NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[b9]"></a>__NVIC_SetPriority</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.__NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Config
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[ba]"></a>__NVIC_SetPriorityGrouping</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, lto-llvm-3178b0.o(.text.__NVIC_SetPriorityGrouping))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>

<P><STRONG><a name="[15b]"></a>act_get_dec_bit</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.act_get_dec_bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = act_get_dec_bit
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_build
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_build
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_build
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rnn_build
</UL>

<P><STRONG><a name="[138]"></a>act_leaky_relu</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.act_leaky_relu))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = act_leaky_relu &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[168]"></a>add_delaycode</STRONG> (Thumb, 524 bytes, Stack size 12 bytes, lto-llvm-3178b0.o(.text.add_delaycode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = add_delaycode
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ir_frame
</UL>

<P><STRONG><a name="[13b]"></a>allocate_block</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.allocate_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = allocate_block &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[13c]"></a>allocate_hook</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.allocate_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = allocate_hook &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_hook
</UL>

<P><STRONG><a name="[13d]"></a>allocate_io</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.allocate_io))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = allocate_io &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_hook
</UL>

<P><STRONG><a name="[13e]"></a>apply_ac_mode</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.apply_ac_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = apply_ac_mode &rArr; apply_ac_parameter_type_2
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_parameter_type_2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_parameter_type_1
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_mode
</UL>

<P><STRONG><a name="[13f]"></a>apply_ac_parameter_type_1</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.apply_ac_parameter_type_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = apply_ac_parameter_type_1
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_function
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_wind_speed
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_temperature
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_swing
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_power
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_mode
</UL>

<P><STRONG><a name="[140]"></a>apply_ac_parameter_type_2</STRONG> (Thumb, 708 bytes, Stack size 36 bytes, lto-llvm-3178b0.o(.text.apply_ac_parameter_type_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = apply_ac_parameter_type_2
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_function
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_wind_speed
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_temperature
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_swing
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_mode
</UL>

<P><STRONG><a name="[141]"></a>apply_ac_power</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.apply_ac_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = apply_ac_power &rArr; apply_ac_parameter_type_1
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_parameter_type_1
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_power
</UL>

<P><STRONG><a name="[142]"></a>apply_ac_swing</STRONG> (Thumb, 338 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.apply_ac_swing))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = apply_ac_swing &rArr; apply_ac_parameter_type_2
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_parameter_type_2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_parameter_type_1
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_swing
</UL>

<P><STRONG><a name="[143]"></a>apply_ac_temperature</STRONG> (Thumb, 434 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.apply_ac_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = apply_ac_temperature &rArr; apply_ac_parameter_type_2
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_parameter_type_2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_parameter_type_1
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_temperature
</UL>

<P><STRONG><a name="[144]"></a>apply_ac_wind_speed</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.apply_ac_wind_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = apply_ac_wind_speed &rArr; apply_ac_parameter_type_2
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_parameter_type_2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_parameter_type_1
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_wind_speed
</UL>

<P><STRONG><a name="[145]"></a>apply_checksum</STRONG> (Thumb, 532 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.apply_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = apply_checksum &rArr; apply_checksum_spec_byte_onebyte
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_checksum_spec_byte_onebyte
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_checksum_spec_byte
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_checksum_halfbyte
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_checksum_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_control
</UL>

<P><STRONG><a name="[146]"></a>apply_checksum_byte</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.apply_checksum_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = apply_checksum_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_checksum
</UL>

<P><STRONG><a name="[147]"></a>apply_checksum_halfbyte</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.apply_checksum_halfbyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = apply_checksum_halfbyte
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_checksum
</UL>

<P><STRONG><a name="[148]"></a>apply_checksum_spec_byte</STRONG> (Thumb, 278 bytes, Stack size 28 bytes, lto-llvm-3178b0.o(.text.apply_checksum_spec_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = apply_checksum_spec_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_checksum
</UL>

<P><STRONG><a name="[149]"></a>apply_checksum_spec_byte_onebyte</STRONG> (Thumb, 230 bytes, Stack size 28 bytes, lto-llvm-3178b0.o(.text.apply_checksum_spec_byte_onebyte))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = apply_checksum_spec_byte_onebyte
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_checksum
</UL>

<P><STRONG><a name="[14a]"></a>apply_function</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.apply_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = apply_function &rArr; apply_ac_parameter_type_2
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_parameter_type_2
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_parameter_type_1
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_control
</UL>

<P><STRONG><a name="[5c]"></a>apply_mode</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.apply_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = apply_mode &rArr; apply_ac_mode &rArr; apply_ac_parameter_type_2
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.rodata)
</UL>
<P><STRONG><a name="[5b]"></a>apply_power</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.apply_power))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = apply_power &rArr; apply_ac_power &rArr; apply_ac_parameter_type_1
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_power
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.rodata)
</UL>
<P><STRONG><a name="[5f]"></a>apply_swing</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.apply_swing))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = apply_swing &rArr; apply_ac_swing &rArr; apply_ac_parameter_type_2
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;has_function
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_swing
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.rodata)
</UL>
<P><STRONG><a name="[5d]"></a>apply_temperature</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.apply_temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = apply_temperature &rArr; apply_ac_temperature &rArr; apply_ac_parameter_type_2
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_in
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_temperature
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.rodata)
</UL>
<P><STRONG><a name="[5e]"></a>apply_wind_speed</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.apply_wind_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = apply_wind_speed &rArr; apply_ac_wind_speed &rArr; apply_ac_parameter_type_2
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_in
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_ac_wind_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_control
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.rodata)
</UL>
<P><STRONG><a name="[180]"></a>binary_parse_data</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.binary_parse_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = binary_parse_data
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
</UL>

<P><STRONG><a name="[17f]"></a>binary_parse_len</STRONG> (Thumb, 404 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.binary_parse_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = binary_parse_len
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
</UL>

<P><STRONG><a name="[17e]"></a>binary_parse_offset</STRONG> (Thumb, 218 bytes, Stack size 12 bytes, lto-llvm-3178b0.o(.text.binary_parse_offset))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = binary_parse_offset
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
</UL>

<P><STRONG><a name="[167]"></a>bits_per_byte</STRONG> (Thumb, 230 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.bits_per_byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = bits_per_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ir_frame
</UL>

<P><STRONG><a name="[1bd]"></a>block_mem_set</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.block_mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = block_mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
</UL>

<P><STRONG><a name="[14e]"></a>char_to_hex</STRONG> (Thumb, 116 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.char_to_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = char_to_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chars_to_hex
</UL>

<P><STRONG><a name="[14d]"></a>chars_to_hex</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.chars_to_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chars_to_hex &rArr; char_to_hex
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_to_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_hex_common
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_hex
</UL>

<P><STRONG><a name="[14f]"></a>check_model_version</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.check_model_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = check_model_version &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[150]"></a>compile_layers</STRONG> (Thumb, 920 bytes, Stack size 64 bytes, lto-llvm-3178b0.o(.text.compile_layers))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + In Cycle
<LI>Call Chain = compile_layers &rArr;  compile_layers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_shortcut_add
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_block
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_input_mem
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_comp_mem
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_memory_block_info
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_layer_info
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_hook_length
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_alignto
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
</UL>

<P><STRONG><a name="[46]"></a>conv2d_build</STRONG> (Thumb, 342 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.conv2d_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = conv2d_build &rArr; new_tensor &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_output_length
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_get_dec_bit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.conv2d_s)
</UL>
<P><STRONG><a name="[47]"></a>conv2d_free</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.conv2d_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = conv2d_free &rArr; delete_tensor &rArr; nnom_free
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_tensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.conv2d_s)
</UL>
<P><STRONG><a name="[45]"></a>conv2d_run</STRONG> (Thumb, 354 bytes, Stack size 168 bytes, lto-llvm-3178b0.o(.text.conv2d_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = conv2d_run &rArr; local_convolve_HWC_q7_nonsquare &rArr; __NNOM_SSAT
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_convolve_HWC_q7_nonsquare
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_convolve_HWC_q15_nonsquare
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.conv2d_s)
</UL>
<P><STRONG><a name="[160]"></a>conv2d_s</STRONG> (Thumb, 458 bytes, Stack size 88 bytes, lto-llvm-3178b0.o(.text.conv2d_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = conv2d_s &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dilation
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stride
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[15c]"></a>conv_output_length</STRONG> (Thumb, 90 bytes, Stack size 28 bytes, lto-llvm-3178b0.o(.text.conv_output_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = conv_output_length
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_build
</UL>

<P><STRONG><a name="[164]"></a>convert_to_ir_time</STRONG> (Thumb, 334 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.convert_to_ir_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = convert_to_ir_time &rArr; replace_with
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;replace_with
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_decode_number
</UL>

<P><STRONG><a name="[166]"></a>create_ir_frame</STRONG> (Thumb, 554 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.create_ir_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = create_ir_frame &rArr; add_delaycode
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bits_per_byte
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_delaycode
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_control
</UL>

<P><STRONG><a name="[fc]"></a>dataProcess</STRONG> (Thumb, 1030 bytes, Stack size 40 bytes, lto-llvm-3178b0.o(.text.dataProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = dataProcess &rArr; AC_update &rArr; AC_save &rArr; W25QXX_Page_Program &rArr; W25QXX_Write_Enable &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_FIFO_Put
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_update
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AC_send
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setrgb
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_get_output
</UL>

<P><STRONG><a name="[56]"></a>default_build</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.default_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = default_build &rArr; new_tensor &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_get_dec_bit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.output_s)
</UL>
<P><STRONG><a name="[15d]"></a>delete_tensor</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.delete_tensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = delete_tensor &rArr; nnom_free
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_free
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_free
</UL>

<P><STRONG><a name="[49]"></a>dense_build</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.dense_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dense_build &rArr; new_tensor &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_get_dec_bit
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.dense_s)
</UL>
<P><STRONG><a name="[4a]"></a>dense_free</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.dense_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = dense_free &rArr; delete_tensor &rArr; nnom_free
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_tensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.dense_s)
</UL>
<P><STRONG><a name="[48]"></a>dense_run</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, lto-llvm-3178b0.o(.text.dense_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = dense_run &rArr; local_fully_connected_q7_opt &rArr; __NNOM_SSAT
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_fully_connected_q7_opt
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.dense_s)
</UL>
<P><STRONG><a name="[16e]"></a>dense_s</STRONG> (Thumb, 204 bytes, Stack size 40 bytes, lto-llvm-3178b0.o(.text.dense_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = dense_s &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[163]"></a>dilation</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.dilation))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = dilation &rArr; shape
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shape
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
</UL>

<P><STRONG><a name="[1bb]"></a>find_last</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.find_last))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = find_last
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_add
</UL>

<P><STRONG><a name="[39]"></a>flatten_build</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.flatten_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = flatten_build &rArr; new_tensor &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.Flatten)
</UL>
<P><STRONG><a name="[38]"></a>flatten_run</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.flatten_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = flatten_run
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.Flatten)
</UL>
<P><STRONG><a name="[170]"></a>flatten_s</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.flatten_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = flatten_s &rArr; Flatten &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flatten
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[171]"></a>free_ac_context</STRONG> (Thumb, 1422 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.free_ac_context))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = free_ac_context &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_binary_close
</UL>

<P><STRONG><a name="[173]"></a>get_ir_keymap</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.get_ir_keymap))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_ir_keymap &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tv_binary_parse
</UL>

<P><STRONG><a name="[1e1]"></a>get_ir_protocol</STRONG> (Thumb, 496 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.get_ir_protocol))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = get_ir_protocol
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tv_binary_parse
</UL>

<P><STRONG><a name="[14b]"></a>has_function</STRONG> (Thumb, 136 bytes, Stack size 12 bytes, lto-llvm-3178b0.o(.text.has_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = has_function
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_swing
</UL>

<P><STRONG><a name="[4c]"></a>input_build</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.input_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = input_build &rArr; new_tensor &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.input_s)
</UL>
<P><STRONG><a name="[4b]"></a>input_run</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.input_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = input_run &rArr; tensor_size
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.input_s)
</UL>
<P><STRONG><a name="[176]"></a>input_s</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, lto-llvm-3178b0.o(.text.input_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = input_s &rArr; new_tensor &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr_v
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shape
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_s
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[8b]"></a>io_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.io_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = io_init
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_s
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softmax
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flatten
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rnn_s
</UL>

<P><STRONG><a name="[178]"></a>io_mem_size</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.io_mem_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = io_mem_size &rArr; tensor_size
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_layer_info
</UL>

<P><STRONG><a name="[179]"></a>ir_ac_binary_close</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.ir_ac_binary_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ir_ac_binary_close &rArr; free_ac_context &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_ac_context
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_close
</UL>

<P><STRONG><a name="[197]"></a>ir_ac_binary_open</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.ir_ac_binary_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ir_ac_binary_open
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_binary_open
</UL>

<P><STRONG><a name="[17a]"></a>ir_ac_control</STRONG> (Thumb, 542 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.ir_ac_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = ir_ac_control &rArr; apply_wind_speed &rArr; apply_ac_wind_speed &rArr; apply_ac_parameter_type_2
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_solo_function
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_ir_frame
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_wind_speed
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_temperature
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_swing
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_power
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_mode
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_function
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_checksum
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_decode
</UL>

<P><STRONG><a name="[17c]"></a>ir_ac_lib_parse</STRONG> (Thumb, 2994 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.ir_ac_lib_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = ir_ac_lib_parse &rArr; parse_delay_code &rArr; parse_delay_code_pos &rArr; parse_delay_code_data &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_in
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_context_init
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_parse_offset
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_parse_len
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;binary_parse_data
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_zero
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_temp_2
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_temp_1
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_swing_info
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_solo_code
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_repeat_times
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_one
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_nmode
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_lastbit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_function_2_tag34
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_function_1_tag29
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_frame_len
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_endian
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_delay_code
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_default_code
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_common_ac_parameter
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_checksum
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_boot_code
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_bit_num
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noprint
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_binary_open
</UL>

<P><STRONG><a name="[196]"></a>ir_binary_open</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.ir_binary_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = ir_binary_open &rArr; ir_ac_lib_parse &rArr; parse_delay_code &rArr; parse_delay_code_pos &rArr; parse_delay_code_data &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_tv_binary_parse
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_tv_binary_open
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_binary_open
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[19a]"></a>ir_close</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.ir_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ir_close &rArr; ir_ac_binary_close &rArr; free_ac_context &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_binary_close
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17d]"></a>ir_context_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.ir_context_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ir_context_init
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
</UL>

<P><STRONG><a name="[19b]"></a>ir_decode</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, lto-llvm-3178b0.o(.text.ir_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = ir_decode &rArr; ir_tv_control &rArr; tv_binary_decode &rArr; print_ir_time &rArr; process_decode_number &rArr; convert_to_ir_time &rArr; replace_with
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_tv_control
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_control
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[198]"></a>ir_tv_binary_open</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.ir_tv_binary_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ir_tv_binary_open &rArr; tv_binary_open
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tv_binary_open
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_binary_open
</UL>

<P><STRONG><a name="[199]"></a>ir_tv_binary_parse</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.ir_tv_binary_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = ir_tv_binary_parse &rArr; tv_binary_parse &rArr; get_ir_keymap &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tv_binary_parse
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_binary_open
</UL>

<P><STRONG><a name="[19c]"></a>ir_tv_control</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.ir_tv_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ir_tv_control &rArr; tv_binary_decode &rArr; print_ir_time &rArr; process_decode_number &rArr; convert_to_ir_time &rArr; replace_with
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tv_binary_decode
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_decode
</UL>

<P><STRONG><a name="[14c]"></a>is_in</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, lto-llvm-3178b0.o(.text.is_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = is_in
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_wind_speed
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_temperature
</UL>

<P><STRONG><a name="[17b]"></a>is_solo_function</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.is_solo_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = is_solo_function
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_control
</UL>

<P><STRONG><a name="[161]"></a>kernel</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.kernel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = kernel &rArr; shape
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shape
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
</UL>

<P><STRONG><a name="[1a0]"></a>layer_run</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.layer_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = layer_run &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_run_to
</UL>

<P><STRONG><a name="[153]"></a>layer_shortcut_add</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.layer_shortcut_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = layer_shortcut_add
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[44]"></a>leaky_relu_run</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.leaky_relu_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = leaky_relu_run &rArr; local_leaky_relu_q7
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_leaky_relu_q7
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_leaky_relu_q15
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.act_leaky_relu)
</UL>
<P><STRONG><a name="[1a9]"></a>local_activation_q15</STRONG> (Thumb, 220 bytes, Stack size 52 bytes, lto-llvm-3178b0.o(.text.local_activation_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = local_activation_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_tanh_q15
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_sigmoid_q15
</UL>

<P><STRONG><a name="[1a3]"></a>local_add_q15</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, lto-llvm-3178b0.o(.text.local_add_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = local_add_q15 &rArr; __NNOM_SSAT.355
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT.355
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstm_cell_q7_q15_run
</UL>

<P><STRONG><a name="[15e]"></a>local_convolve_HWC_q15_nonsquare</STRONG> (Thumb, 846 bytes, Stack size 160 bytes, lto-llvm-3178b0.o(.text.local_convolve_HWC_q15_nonsquare))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = local_convolve_HWC_q15_nonsquare &rArr; __NNOM_SSAT.355
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT.355
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_run
</UL>

<P><STRONG><a name="[15f]"></a>local_convolve_HWC_q7_nonsquare</STRONG> (Thumb, 804 bytes, Stack size 160 bytes, lto-llvm-3178b0.o(.text.local_convolve_HWC_q7_nonsquare))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = local_convolve_HWC_q7_nonsquare &rArr; __NNOM_SSAT
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_run
</UL>

<P><STRONG><a name="[1a6]"></a>local_fully_connected_mat_q7_vec_q15_opt</STRONG> (Thumb, 1198 bytes, Stack size 112 bytes, lto-llvm-3178b0.o(.text.local_fully_connected_mat_q7_vec_q15_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = local_fully_connected_mat_q7_vec_q15_opt &rArr; __NNOM_SSAT.355
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT.355
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstm_cell_q7_q15_run
</UL>

<P><STRONG><a name="[16d]"></a>local_fully_connected_q7_opt</STRONG> (Thumb, 1208 bytes, Stack size 88 bytes, lto-llvm-3178b0.o(.text.local_fully_connected_q7_opt))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = local_fully_connected_q7_opt &rArr; __NNOM_SSAT
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_run
</UL>

<P><STRONG><a name="[1a1]"></a>local_leaky_relu_q15</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.local_leaky_relu_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = local_leaky_relu_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaky_relu_run
</UL>

<P><STRONG><a name="[1a2]"></a>local_leaky_relu_q7</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.local_leaky_relu_q7))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = local_leaky_relu_q7
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaky_relu_run
</UL>

<P><STRONG><a name="[1a7]"></a>local_mult_q15</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.local_mult_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = local_mult_q15 &rArr; __NNOM_SSAT.355
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT.355
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstm_cell_q7_q15_run
</UL>

<P><STRONG><a name="[1ae]"></a>local_q15_to_q7</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.local_q15_to_q7))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = local_q15_to_q7
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstm_cell_q7_q15_run
</UL>

<P><STRONG><a name="[1ad]"></a>local_q7_to_q15</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.local_q7_to_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = local_q7_to_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstm_cell_q7_q15_run
</UL>

<P><STRONG><a name="[1a8]"></a>local_sigmoid_q15</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.local_sigmoid_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = local_sigmoid_q15 &rArr; local_activation_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_activation_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstm_cell_q7_q15_run
</UL>

<P><STRONG><a name="[1aa]"></a>local_softmax_q7</STRONG> (Thumb, 274 bytes, Stack size 40 bytes, lto-llvm-3178b0.o(.text.local_softmax_q7))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = local_softmax_q7 &rArr; __NNOM_SSAT
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_USAT
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NNOM_SSAT
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softmax_run
</UL>

<P><STRONG><a name="[1ac]"></a>local_tanh_q15</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.local_tanh_q15))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = local_tanh_q15 &rArr; local_activation_q15
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_activation_q15
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstm_cell_q7_q15_run
</UL>

<P><STRONG><a name="[4f]"></a>lstm_cell_free</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.lstm_cell_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lstm_cell_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.lstm_cell_s)
</UL>
<P><STRONG><a name="[4e]"></a>lstm_cell_q7_q15_build</STRONG> (Thumb, 148 bytes, Stack size 12 bytes, lto-llvm-3178b0.o(.text.lstm_cell_q7_q15_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lstm_cell_q7_q15_build
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.lstm_cell_s)
</UL>
<P><STRONG><a name="[4d]"></a>lstm_cell_q7_q15_run</STRONG> (Thumb, 476 bytes, Stack size 104 bytes, lto-llvm-3178b0.o(.text.lstm_cell_q7_q15_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = lstm_cell_q7_q15_run &rArr; local_fully_connected_mat_q7_vec_q15_opt &rArr; __NNOM_SSAT.355
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_tanh_q15
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_sigmoid_q15
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_q7_to_q15
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_q15_to_q7
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_mult_q15
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_fully_connected_mat_q7_vec_q15_opt
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_add_q15
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.lstm_cell_s)
</UL>
<P><STRONG><a name="[1af]"></a>lstm_cell_s</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.lstm_cell_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lstm_cell_s &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[1ba]"></a>mem_analysis_result</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.mem_analysis_result))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mem_analysis_result &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
</UL>

<P><STRONG><a name="[54]"></a>model_active</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.model_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = model_active
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.new_model)
</UL>
<P><STRONG><a name="[50]"></a>model_add</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.model_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = model_add &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_last
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.new_model)
</UL>
<P><STRONG><a name="[1bc]"></a>model_compile</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, lto-llvm-3178b0.o(.text.model_compile))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = model_compile &rArr; compile_layers &rArr;  compile_layers (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_last
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mem_set
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_mem_set
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_tailed_activation
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_set_ops
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_analysis_result
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[eb]"></a>model_feed_data</STRONG> (Thumb, 254 bytes, Stack size 40 bytes, lto-llvm-3178b0.o(.text.model_feed_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = model_feed_data &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;round
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_get_output
</UL>

<P><STRONG><a name="[ec]"></a>model_get_output</STRONG> (Thumb, 514 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.model_get_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = model_get_output &rArr; dataProcess &rArr; AC_update &rArr; AC_save &rArr; W25QXX_Page_Program &rArr; W25QXX_Write_Enable &rArr; W25QXX_Wait_Busy &rArr; W25QXX_ReadSR &rArr; SPI_Receive &rArr; HAL_SPI_Receive &rArr; HAL_SPI_TransmitReceive &rArr; SPI_EndRxTxTransaction &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataProcess
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_run
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_feed_data
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[51]"></a>model_hook</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.model_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = model_hook &rArr; allocate_hook &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_io
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_mergex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.new_model)
</UL>
<P><STRONG><a name="[52]"></a>model_merge</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.model_merge))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = model_merge &rArr; model_mergex &rArr; model_hook &rArr; allocate_hook &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_mergex
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.new_model)
</UL>
<P><STRONG><a name="[53]"></a>model_mergex</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, lto-llvm-3178b0.o(.text.model_mergex))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = model_mergex &rArr; model_hook &rArr; allocate_hook &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_merge
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.new_model)
</UL>
<P><STRONG><a name="[1c4]"></a>model_run</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.model_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = model_run &rArr; model_run_to &rArr; layer_run &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_run_to
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_get_output
</UL>

<P><STRONG><a name="[1c5]"></a>model_run_to</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.model_run_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = model_run_to &rArr; layer_run &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layer_run
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_run
</UL>

<P><STRONG><a name="[1c0]"></a>model_set_ops</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.model_set_ops))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = model_set_ops
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
</UL>

<P><STRONG><a name="[ea]"></a>mouseMove</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.mouseMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mouseMove &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
</UL>

<P><STRONG><a name="[1b4]"></a>mouseclick</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.mouseclick))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mouseclick &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b8]"></a>mousediscli</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.mousediscli))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mousediscli &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout &rArr; UART_EndRxTransfer
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1c6]"></a>new_model</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.new_model))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = new_model &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[159]"></a>new_tensor</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.new_tensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = new_tensor &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_alignto
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_build
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_build
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_build
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_build
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_build
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softmax_build
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rnn_build
</UL>

<P><STRONG><a name="[152]"></a>nnom_alignto</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, lto-llvm-3178b0.o(.text.nnom_alignto))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nnom_alignto
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_malloc
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
</UL>

<P><STRONG><a name="[16b]"></a>nnom_free</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.nnom_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = nnom_free
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_tensor
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rnn_free
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_s
</UL>

<P><STRONG><a name="[158]"></a>nnom_hook_length</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, lto-llvm-3178b0.o(.text.nnom_hook_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = nnom_hook_length
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[1c7]"></a>nnom_malloc</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.nnom_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_alignto
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>

<P><STRONG><a name="[8a]"></a>nnom_mem</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.nnom_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_malloc
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_alignto
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_s
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_io
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;allocate_hook
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_leaky_relu
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softmax
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flatten
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rnn_s
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rnn_build
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_model
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstm_cell_s
</UL>

<P><STRONG><a name="[1b1]"></a>nnom_model_create</STRONG> (Thumb, 134 bytes, Stack size 48 bytes, lto-llvm-3178b0.o(.text.nnom_model_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = nnom_model_create &rArr; output_s &rArr; input_s &rArr; new_tensor &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_s
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_s
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_model_version
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_leaky_relu
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softmax_s
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rnn_s
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_s
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_model
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lstm_cell_s
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b0]"></a>nnom_set_static_buf</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.nnom_set_static_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nnom_set_static_buf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18a]"></a>noprint</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.noprint))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = noprint
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ir_time
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_solo_code
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_function_2
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_function_1
</UL>

<P><STRONG><a name="[55]"></a>output_run</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.output_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = output_run &rArr; tensor_size
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.output_s)
</UL>
<P><STRONG><a name="[1ca]"></a>output_s</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.output_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = output_s &rArr; input_s &rArr; new_tensor &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_free
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[191]"></a>parse_bit_num</STRONG> (Thumb, 294 bytes, Stack size 88 bytes, lto-llvm-3178b0.o(.text.parse_bit_num))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = parse_bit_num &rArr; parse_delay_code_tag48_pos &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_delay_code_tag48_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
</UL>

<P><STRONG><a name="[18f]"></a>parse_boot_code</STRONG> (Thumb, 252 bytes, Stack size 48 bytes, lto-llvm-3178b0.o(.text.parse_boot_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = parse_boot_code &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
</UL>

<P><STRONG><a name="[186]"></a>parse_checksum</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.parse_checksum))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = parse_checksum &rArr; parse_checksum_data &rArr; string_to_hex_common &rArr; chars_to_hex &rArr; char_to_hex
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_checksum_malloc
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_checksum_data
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
</UL>

<P><STRONG><a name="[1cf]"></a>parse_checksum_byte_typed</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, lto-llvm-3178b0.o(.text.parse_checksum_byte_typed))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = parse_checksum_byte_typed
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_checksum_data
</UL>

<P><STRONG><a name="[1cd]"></a>parse_checksum_data</STRONG> (Thumb, 268 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.parse_checksum_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = parse_checksum_data &rArr; string_to_hex_common &rArr; chars_to_hex &rArr; char_to_hex
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_hex_common
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_checksum_spec_half_byte_typed
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_checksum_half_byte_typed
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_checksum_byte_typed
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_checksum
</UL>

<P><STRONG><a name="[1d0]"></a>parse_checksum_half_byte_typed</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, lto-llvm-3178b0.o(.text.parse_checksum_half_byte_typed))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = parse_checksum_half_byte_typed
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_checksum_data
</UL>

<P><STRONG><a name="[1cc]"></a>parse_checksum_malloc</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.parse_checksum_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = parse_checksum_malloc &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_checksum
</UL>

<P><STRONG><a name="[1d1]"></a>parse_checksum_spec_half_byte_typed</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.parse_checksum_spec_half_byte_typed))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = parse_checksum_spec_half_byte_typed &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_checksum_data
</UL>

<P><STRONG><a name="[183]"></a>parse_common_ac_parameter</STRONG> (Thumb, 330 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.parse_common_ac_parameter))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = parse_common_ac_parameter &rArr; parse_comp_data_type_2 &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_hex_common
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_comp_data_type_2
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_comp_data_type_1
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
</UL>

<P><STRONG><a name="[1d2]"></a>parse_comp_data_type_1</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.parse_comp_data_type_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = parse_comp_data_type_1 &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_temp_1
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_common_ac_parameter
</UL>

<P><STRONG><a name="[1d3]"></a>parse_comp_data_type_2</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.parse_comp_data_type_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = parse_comp_data_type_2 &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_temp_2
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_common_ac_parameter
</UL>

<P><STRONG><a name="[184]"></a>parse_default_code</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.parse_default_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = parse_default_code &rArr; string_to_hex &rArr; chars_to_hex &rArr; char_to_hex
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
</UL>

<P><STRONG><a name="[194]"></a>parse_delay_code</STRONG> (Thumb, 194 bytes, Stack size 88 bytes, lto-llvm-3178b0.o(.text.parse_delay_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = parse_delay_code &rArr; parse_delay_code_pos &rArr; parse_delay_code_data &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_delay_code_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
</UL>

<P><STRONG><a name="[1d6]"></a>parse_delay_code_data</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, lto-llvm-3178b0.o(.text.parse_delay_code_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = parse_delay_code_data &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_delay_code_pos
</UL>

<P><STRONG><a name="[1d5]"></a>parse_delay_code_pos</STRONG> (Thumb, 206 bytes, Stack size 96 bytes, lto-llvm-3178b0.o(.text.parse_delay_code_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = parse_delay_code_pos &rArr; parse_delay_code_data &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_delay_code_data
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_delay_code
</UL>

<P><STRONG><a name="[1cb]"></a>parse_delay_code_tag48_pos</STRONG> (Thumb, 220 bytes, Stack size 112 bytes, lto-llvm-3178b0.o(.text.parse_delay_code_tag48_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = parse_delay_code_tag48_pos &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_bit_num
</UL>

<P><STRONG><a name="[192]"></a>parse_endian</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.parse_endian))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = parse_endian &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
</UL>

<P><STRONG><a name="[18c]"></a>parse_frame_len</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.parse_frame_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = parse_frame_len &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
</UL>

<P><STRONG><a name="[1d8]"></a>parse_function_1</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, lto-llvm-3178b0.o(.text.parse_function_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = parse_function_1 &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noprint
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_function_1_tag29
</UL>

<P><STRONG><a name="[189]"></a>parse_function_1_tag29</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.parse_function_1_tag29))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = parse_function_1_tag29 &rArr; parse_function_1 &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_hex_common
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_function_1
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
</UL>

<P><STRONG><a name="[1d9]"></a>parse_function_2</STRONG> (Thumb, 348 bytes, Stack size 40 bytes, lto-llvm-3178b0.o(.text.parse_function_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = parse_function_2 &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noprint
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_function_2_tag34
</UL>

<P><STRONG><a name="[18b]"></a>parse_function_2_tag34</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.parse_function_2_tag34))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = parse_function_2_tag34 &rArr; parse_function_2 &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_hex_common
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_function_2
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
</UL>

<P><STRONG><a name="[195]"></a>parse_lastbit</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.parse_lastbit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = parse_lastbit &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
</UL>

<P><STRONG><a name="[193]"></a>parse_nmode</STRONG> (Thumb, 286 bytes, Stack size 88 bytes, lto-llvm-3178b0.o(.text.parse_nmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = parse_nmode &rArr; parse_nmode_pos &rArr; parse_nmode_data_temp &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_nmode_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
</UL>

<P><STRONG><a name="[1db]"></a>parse_nmode_data_speed</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, lto-llvm-3178b0.o(.text.parse_nmode_data_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = parse_nmode_data_speed &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_nmode_pos
</UL>

<P><STRONG><a name="[1dc]"></a>parse_nmode_data_temp</STRONG> (Thumb, 236 bytes, Stack size 48 bytes, lto-llvm-3178b0.o(.text.parse_nmode_data_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = parse_nmode_data_temp &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_nmode_pos
</UL>

<P><STRONG><a name="[1da]"></a>parse_nmode_pos</STRONG> (Thumb, 276 bytes, Stack size 88 bytes, lto-llvm-3178b0.o(.text.parse_nmode_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = parse_nmode_pos &rArr; parse_nmode_data_temp &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_nmode_data_temp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_nmode_data_speed
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_nmode
</UL>

<P><STRONG><a name="[18e]"></a>parse_one</STRONG> (Thumb, 186 bytes, Stack size 72 bytes, lto-llvm-3178b0.o(.text.parse_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = parse_one &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
</UL>

<P><STRONG><a name="[190]"></a>parse_repeat_times</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.parse_repeat_times))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = parse_repeat_times &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
</UL>

<P><STRONG><a name="[188]"></a>parse_solo_code</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.parse_solo_code))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = parse_solo_code &rArr; string_to_hex_common &rArr; chars_to_hex &rArr; char_to_hex
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_hex_common
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noprint
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
</UL>

<P><STRONG><a name="[181]"></a>parse_swing_info</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.parse_swing_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = parse_swing_info
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
</UL>

<P><STRONG><a name="[185]"></a>parse_temp_1</STRONG> (Thumb, 456 bytes, Stack size 40 bytes, lto-llvm-3178b0.o(.text.parse_temp_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = parse_temp_1 &rArr; parse_comp_data_type_1 &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_hex_common
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_comp_data_type_1
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
</UL>

<P><STRONG><a name="[187]"></a>parse_temp_2</STRONG> (Thumb, 500 bytes, Stack size 40 bytes, lto-llvm-3178b0.o(.text.parse_temp_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = parse_temp_2 &rArr; parse_comp_data_type_2 &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;string_to_hex_common
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_comp_data_type_2
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
</UL>

<P><STRONG><a name="[18d]"></a>parse_zero</STRONG> (Thumb, 186 bytes, Stack size 72 bytes, lto-llvm-3178b0.o(.text.parse_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = parse_zero &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_ac_lib_parse
</UL>

<P><STRONG><a name="[1dd]"></a>print_ir_time</STRONG> (Thumb, 1210 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.print_ir_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = print_ir_time &rArr; process_decode_number &rArr; convert_to_ir_time &rArr; replace_with
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_decode_number
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noprint
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tv_binary_decode
</UL>

<P><STRONG><a name="[154]"></a>print_layer_info</STRONG> (Thumb, 580 bytes, Stack size 40 bytes, lto-llvm-3178b0.o(.text.print_layer_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = print_layer_info &rArr; io_mem_size &rArr; tensor_size
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_mem_size
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[155]"></a>print_memory_block_info</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.print_memory_block_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = print_memory_block_info &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[1de]"></a>process_decode_number</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.process_decode_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = process_decode_number &rArr; convert_to_ir_time &rArr; replace_with
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_to_ir_time
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ir_time
</UL>

<P><STRONG><a name="[1df]"></a>release_block</STRONG> (Thumb, 44 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.release_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = release_block
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_input_mem
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_comp_mem
</UL>

<P><STRONG><a name="[156]"></a>release_comp_mem</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.release_comp_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = release_comp_mem &rArr; release_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_block
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[157]"></a>release_input_mem</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.release_input_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = release_input_mem &rArr; release_block
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_block
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
</UL>

<P><STRONG><a name="[165]"></a>replace_with</STRONG> (Thumb, 370 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.replace_with))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = replace_with
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_to_ir_time
</UL>

<P><STRONG><a name="[1b5]"></a>rgb_breathe</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.rgb_breathe))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rgb_breathe &rArr; RGB_SendArray &rArr; HAL_TIM_PWM_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Load
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_SetColor
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_SendArray
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b9]"></a>rgb_loop</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, lto-llvm-3178b0.o(.text.rgb_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = rgb_loop &rArr; RGB_SendArray &rArr; HAL_TIM_PWM_Start_DMA &rArr; HAL_DMA_Start_IT &rArr; DMA_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Load
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_SetColor
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RGB_SendArray
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[58]"></a>rnn_build</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.rnn_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = rnn_build &rArr; new_tensor &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;act_get_dec_bit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.rnn_s)
</UL>
<P><STRONG><a name="[59]"></a>rnn_free</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.rnn_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = rnn_free &rArr; nnom_free
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.rnn_s)
</UL>
<P><STRONG><a name="[57]"></a>rnn_run</STRONG> (Thumb, 356 bytes, Stack size 56 bytes, lto-llvm-3178b0.o(.text.rnn_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = rnn_run &rArr; tensor_get_num_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.rnn_s)
</UL>
<P><STRONG><a name="[1c8]"></a>rnn_s</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, lto-llvm-3178b0.o(.text.rnn_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rnn_s &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_init
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[1bf]"></a>set_tailed_activation</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.set_tailed_activation))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = set_tailed_activation &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
</UL>

<P><STRONG><a name="[169]"></a>setrgb</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.setrgb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setrgb
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dataProcess
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16f]"></a>shape</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lto-llvm-3178b0.o(.text.shape))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = shape
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kernel
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dilation
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stride
</UL>

<P><STRONG><a name="[43]"></a>softmax_build</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.softmax_build))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = softmax_build &rArr; new_tensor &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;new_tensor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.Softmax)
</UL>
<P><STRONG><a name="[42]"></a>softmax_run</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.softmax_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = softmax_run &rArr; local_softmax_q7 &rArr; __NNOM_SSAT
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;local_softmax_q7
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_size
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-3178b0.o(.text.Softmax)
</UL>
<P><STRONG><a name="[1c9]"></a>softmax_s</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.softmax_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = softmax_s &rArr; Softmax &rArr; nnom_mem &rArr; nnom_malloc &rArr; printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Softmax
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nnom_model_create
</UL>

<P><STRONG><a name="[162]"></a>stride</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.stride))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = stride &rArr; shape
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shape
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_s
</UL>

<P><STRONG><a name="[1d4]"></a>string_to_hex</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.string_to_hex))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = string_to_hex &rArr; chars_to_hex &rArr; char_to_hex
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chars_to_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_default_code
</UL>

<P><STRONG><a name="[1ce]"></a>string_to_hex_common</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.string_to_hex_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = string_to_hex_common &rArr; chars_to_hex &rArr; char_to_hex
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chars_to_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_temp_2
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_temp_1
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_solo_code
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_function_2_tag34
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_function_1_tag29
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_common_ac_parameter
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_checksum_data
</UL>

<P><STRONG><a name="[15a]"></a>tensor_cpy_attr</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.tensor_cpy_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = tensor_cpy_attr &rArr; tensor_get_num_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_build
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_build
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_build
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softmax_build
</UL>

<P><STRONG><a name="[16a]"></a>tensor_get_num_channel</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, lto-llvm-3178b0.o(.text.tensor_get_num_channel))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = tensor_get_num_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_build
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_build
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_s
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_build
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_build
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_set_attr
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_cpy_attr
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softmax_build
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rnn_run
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rnn_build
</UL>

<P><STRONG><a name="[1be]"></a>tensor_mem_set</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, lto-llvm-3178b0.o(.text.tensor_mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tensor_mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;model_compile
</UL>

<P><STRONG><a name="[16c]"></a>tensor_set_attr</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.tensor_set_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tensor_set_attr &rArr; tensor_get_num_channel
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tensor_get_num_channel
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_build
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_build
</UL>

<P><STRONG><a name="[177]"></a>tensor_set_attr_v</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lto-llvm-3178b0.o(.text.tensor_set_attr_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = tensor_set_attr_v
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_s
</UL>

<P><STRONG><a name="[151]"></a>tensor_size</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, lto-llvm-3178b0.o(.text.tensor_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = tensor_size
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leaky_relu_run
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_mem_size
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_run
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flatten_build
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_run
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dense_build
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv2d_build
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compile_layers
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;softmax_run
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_run
</UL>

<P><STRONG><a name="[19f]"></a>tv_binary_decode</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, lto-llvm-3178b0.o(.text.tv_binary_decode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = tv_binary_decode &rArr; print_ir_time &rArr; process_decode_number &rArr; convert_to_ir_time &rArr; replace_with
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_ir_time
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_tv_control
</UL>

<P><STRONG><a name="[19d]"></a>tv_binary_open</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lto-llvm-3178b0.o(.text.tv_binary_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = tv_binary_open
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_tv_binary_open
</UL>

<P><STRONG><a name="[19e]"></a>tv_binary_parse</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.tv_binary_parse))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = tv_binary_parse &rArr; get_ir_keymap &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ir_protocol
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ir_keymap
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ir_tv_binary_parse
</UL>

<P><STRONG><a name="[10f]"></a>user_delaynus_tim</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lto-llvm-3178b0.o(.text.user_delaynus_tim))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = user_delaynus_tim &rArr; HAL_TIM_Base_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IR_send
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
